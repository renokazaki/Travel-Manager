// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ユーザー管理
model User {
  id           String   @id @default(cuid())
  clerkId      String   @unique
  displayName  String
  profileImage String?
  lineId       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // リレーション
  trips Trip[]

  @@map("users")
}

// 旅行グループ
model Trip {
  id          String     @id @default(cuid())
  name        String
  destination String
  startDate   DateTime?
  endDate     DateTime?
  image       String?
  status      TripStatus @default(PLANNING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // リレーション
  users                User[]
  events               Event[]
  memberAvailabilities MemberAvailability[]
  paymentRecords       PaymentRecord[]
  activityLogs         ActivityLog[]

  @@map("trips")
}

// 統一されたイベントモデル
model Event {
  id          String      @id @default(cuid())
  tripId      String
  title       String
  location    String?
  type        EventType?
  status      EventStatus @default(PENDING)

  // スケジュール関連
  date            DateTime? @db.Date
  startTime       DateTime? @db.Time
  endTime         DateTime? @db.Time
  durationMinutes Int?
  order           Int?

  // 優先度・メモ
  priority Priority?
  notes    String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("events")
}

// 日程調整
model MemberAvailability {
  id        String             @id @default(cuid())
  tripId    String
  clerkId   String
  date      DateTime           @db.Date
  status    AvailabilityStatus
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  Trip      Trip               @relation(fields: [tripId], references: [id])

  @@unique([tripId, clerkId, date])
  @@map("member_availabilities")
}

// 支払い記録
model PaymentRecord {
  id          String   @id @default(cuid())
  tripId      String
  paidBy      String
  title       String
  amount      Decimal
  category    String
  paymentDate DateTime
  description String   @db.Text
  isSettled   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Trip        Trip     @relation(fields: [tripId], references: [id])

  @@map("payment_records")
}

// 支払い詳細（誰の分を支払ったか）
model PaymentDetail {
  id              String   @id @default(cuid())
  paymentRecordId String
  clerkId         String
  splitAmount     Decimal
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([paymentRecordId, clerkId])
  @@map("payment_details")
}

// 活動履歴
model ActivityLog {
  id          String     @id @default(cuid())
  tripId      String
  clerkId     String
  targetType  TargetType
  targetId    String
  description String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Trip        Trip       @relation(fields: [tripId], references: [id])

  @@map("activity_logs")
}

// Enums
enum TripStatus {
  PLANNING  @map("計画中")
  CONFIRMED @map("確定")
  COMPLETED @map("完了")

  @@map("trip_status")
}

enum EventStatus {
  PENDING   @map("候補")
  SCHEDULED @map("確定")
  CANCELLED @map("キャンセル")
  COMPLETED @map("完了")

  @@map("event_status")
}

enum EventType {
  ACCOMMODATION  @map("accommodation")
  FOOD           @map("food")
  ACTIVITY       @map("activity")
  TRANSPORTATION @map("transportation")
  OTHER          @map("other")

  @@map("event_type")
}

enum Priority {
  HIGH   @map("high")
  MEDIUM @map("medium")
  LOW    @map("low")

  @@map("priority")
}

enum AvailabilityStatus {
  AVAILABLE   @map("available")
  UNAVAILABLE @map("unavailable")
  MAYBE       @map("maybe")

  @@map("availability_status")
}

enum TargetType {
  TRIP     @map("trip")
  EVENT    @map("event")
  PAYMENT  @map("payment")
  SCHEDULE @map("schedule")

  @@map("target_type")
}
